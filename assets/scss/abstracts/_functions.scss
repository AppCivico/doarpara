@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'sass-apca/apca';

@use 'constants/mdc-linear-channel-values' as constants;

////
/// This file contains all application-wide Sass functions.
/// @group helpers
////


/// path for assets to styles
///
/// @type string
/// @access public
$my-base-url: '/assets/' !default;

/// break points for the project
///
/// @type map
/// @access public
$my-breakpoints: null !default;

/// font weights for the project
///
/// @type map
/// @access public
$my-font-weights: null !default;

/// layers for the project
///
/// @type map
/// @access public
$my-layers: null !default;

/// gutter for the grid of the project
///
/// @type number
/// @access public
$my-gutter: 1rem !default;

/// palette of colors for te project
///
/// @type map
/// @access public
$my-palette: () !default;

/**
 * @var {Map} $apca-use-case-thresholds
 * A map defining APCA contrast thresholds for various text usage contexts.
 * Each key corresponds to a specific context and its required minimum contrast value (Lc).
 * Keys:
 *   - 'body':       90 (fluent body text)
 *   - 'sub-fluent': 75 (secondary body / larger non-body text)
 *   - 'content':    60 (button labels, links, interface text)
 *   - 'headline':   45 (headlines, large bold text)
 *   - 'spot':       30 (placeholders, disabled text)
 *   - 'non-text':   15 (dividers, thick outlines)
 */
$apca-use-case-thresholds: (
  'body':       90,
  'sub-fluent': 75,
  'content':    60,
  'headline':   45,
  'spot':       30,
  'non-text':   15
) !default;

/// Native `url(..)` function wrapper
///
/// @param {String} $base-url - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
///
@function asset($path, $base-url: $my-base-url, $type) {
  @return url('#{$base-url}#{$type}/#{$path}?v=#{string.unique-id()}');
}

/// Returns URL to an image based on its path
///
/// @param {String} $path - image path
/// @param {String} $base-url [$my-base-url] - base URL
/// @return {Url}
/// @require {variable} $my-base-url
///
@function image($path, $base-url: $my-base-url) {
  @return asset($path, $base-url, 'images');
}

/// Returns URL to a font based on its path
///
/// @param {String} $path - font path
/// @param {String} $base-url [$my-base-url] - base URL
/// @return {Url}
/// @require {variable} $my-base-url
///
@function font($path, $base-url: $my-base-url) {
  @return asset($path, $base-url, 'font-faces');
}

/// Remove the unit of a length
///
/// @param {Number} $number - Number to remove unit from
/// @access public
/// @return {Number} - Unitless number
/// @link http://stackoverflow.com/a/12335841
///
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

/// toFixed() function in Sass
///
/// @author Kitty Giraudel
/// @param {Number} $float - Number to format
/// @param {Number} $digits [2] - Number of digits to leave
/// @access private
/// @return {Number}
///
@function _to-fixed($float, $digits: 2) {
  $sass-precision: 10;
  $pow: 0;

  @if $digits > $sass-precision {
    @warn 'Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now. The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`.';
  }

  $pow: math.pow(10, $digits);

  @return math.div(math.round($float * $pow), $pow);
}

/// Calculate the Perceived Brightness of a Color
///
/// @access private
/// @param {color} $color
/// @link http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx
/// @link http://alienryderflex.com/hsp.html
///
@function _brightness($color) {
  $red-magic-number: 241;
  $green-magic-number: 691;
  $blue-magic-number: 68;
  $brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

  // Extract color components
  $red-component: color.channel($color, 'red', $space: rgb);
  $green-component: color.channel($color, 'green', $space: rgb);
  $blue-component: color.channel($color, 'blue', $space: rgb);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: math.sqrt(
    math.div(
      ($red-component * $red-component * $red-magic-number) +
      ($green-component * $green-component * $green-magic-number) +
      ($blue-component * $blue-component * $blue-magic-number),
      $brightness-divisor
    )
  );

  // Convert to percentage and return
  @return math.div(100% * $number, 255);
}

/// Calculate the luminance for a color.
///
/// @access private
/// @param {color} $color
/// @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
/// @link https://www.w3.org/TR/WCAG20/#relativeluminancedef
///
@function _luminance($color) {
  $red: math.round(color.channel($color, 'red', $space: rgb)) + 1;
  $green: math.round(color.channel($color, 'green', $space: rgb)) + 1;
  $blue: math.round(color.channel($color, 'blue', $space: rgb)) + 1;

  $red: list.nth(constants.$MDC-LINEAR-CHANNEL-VALUES, $red);
  $green: list.nth(constants.$MDC-LINEAR-CHANNEL-VALUES, $green);
  $blue: list.nth(constants.$MDC-LINEAR-CHANNEL-VALUES, $blue);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

/// Calculate the contrast ratio between two colors using their luminance
///
/// @access private
/// @param {color} $color
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
/// @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
@function _contrast($fg-color, $bg-color) {
  $fore-lum: _luminance($fg-color) + 0.05;
  $back-lum: _luminance($bg-color) + 0.05;

  @return math.div(math.max($back-lum, $fore-lum), math.min($back-lum, $fore-lum));
}

/// Mix a transparent color with its background
///
/// @access private
/// @param {color} $foreground - Foreground transparent color
/// @param {color} $background - Background opaque color
/// @link http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
///
@function _opacize($foreground, $background) {
  $percent: color.channel($foreground, 'alpha') * 100%;
  $opaque: color.adjust($foreground, $alpha: 1);

  @return color.mix($opaque, $background, $percent);
}

/// Automagically computes the best equivalent RGBA color.
///
/// @access private
/// @param {color} $desired-color - Desired color to match against background
/// @param {color} $background-color - Background opaque color
/// @author Tobia
/// @link https://stackoverflow.com/a/38265284
///
@function _alphaize($desired-color, $background-color) {
  $r1: color.channel($background-color, 'red', $space: rgb);
  $g1: color.channel($background-color, 'green', $space: rgb);
  $b1: color.channel($background-color, 'blue', $space: rgb);

  $r2: color.channel($desired-color, 'red', $space: rgb);
  $g2: color.channel($desired-color, 'green', $space: rgb);
  $b2: color.channel($desired-color, 'blue', $space: rgb);

  $alpha: 0;
  $r: -1;
  $g: -1;
  $b: -1;

  @while $alpha < 1 and ($r < 0 or $g < 0 or $b < 0 or $r > 255 or $g > 255 or $b > 255) {
    $alpha: $alpha + math.div(1, 256);
    $inv: math.div(1, $alpha);
    $r: $r2 * $inv + $r1 * (1 - $inv);
    $g: $g2 * $inv + $g1 * (1 - $inv);
    $b: $b2 * $inv + $b1 * (1 - $inv);
  }

  @return rgba($r, $g, $b, $alpha);
}

$_default-text-color--dark: palette('text', 'dark');
$_default-text-color--light: palette('text', 'light');

/// Determine whether to use dark or light text on top of given color.
/// If background preferable color not provide, returns black for dark text and white for light text.
/// @access public
/// @param {color} $bg-color - background color
/// @param {color} $fg-color - foreground color
/// @param {string} $level - WCAG level, being 'AAA' or 'AA'
/// @return {Color}
/// @link https://www.madebymike.com.au/writing/accessible-contrast-with-less-and-sass/
/// @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
@function text-contrast($bg-color, $fg-color: null, $level: 'AA') {
  $level: string.to-upper-case($level);
  $lightest-color: rgb(255, 255, 255);
  $darkest-color: rgb(0, 0, 0);
  $lighter-ratio: 0;
  $darker-ratio: 0;
  $light-fg: if($fg-color == null, $lightest-color, $fg-color);
  $dark-fg: if($fg-color == null, $darkest-color, $fg-color);
  $threshold: if($level == 'AA', 4.5, 7);
  $light-fg-has-alpha: false;
  $dark-fg-has-alpha: false;
  $lighter-ratio: 0;
  $darker-ratio: 0;

  @if meta.type-of($bg-color) != 'color' {
    @error 'Background must be a color. Value `#{$bg-color}` provided is of type `#{meta.type-of(bg-color)}`';
  }

  @if meta.type-of($fg-color) != 'color' and $fg-color != null {
    @error 'Foreground must be a color. Value `#{$fg-color}` provided is of type `#{meta.type-of(fg-color)}`';
  }

  @if $level != 'AA' and $level != 'AAA' {
    @warn 'Unknown `$level` submitted. Allowed: `AA`, `AAA`. Assuming `AAA`';
  }

  @if color.channel($bg-color, 'alpha') < 1 {
    @error 'Background color can\'t have alpha channel. `#{$bg-color}` given';
  }

  @if color.channel($light-fg, 'alpha') < 1 {
    $light-fg: _opacize($light-fg, $bg-color);
    $light-fg-has-alpha: true;
  }

  @if color.channel($dark-fg, 'alpha') < 1 {
    $dark-fg: _opacize($dark-fg, $bg-color);
    $dark-fg-has-alpha: true;
  }

  @if meta.global-variable-exists('$_default-text-color--light') {
    @if meta.type-of($_default-text-color--light) != 'color' {
      @error '`$_default-text-color--light` must be a color. Value `#{$_default-text-color--light}` provided is of type `#{meta.type-of($_default-text-color--light)}`';
    } @else {
      $lightest-color: $_default-text-color--light;
    }
  }

  @if meta.global-variable-exists('$_default-text-color--dark') {
    @if meta.type-of($_default-text-color--dark) != 'color' {
      @error '`$_default-text-color--dark` must be a color. Value `#{$_default-text-color--dark}` provided is of type `#{meta.type-of($_default-text-color--dark)}`';
    } @else {
      $darkest-color: $_default-text-color--dark;
    }
  }

  $lighter-ratio: _contrast($bg-color, $light-fg);
  $darker-ratio: _contrast($bg-color, $dark-fg);

  @if $lighter-ratio >= $threshold {
    @return if($light-fg-has-alpha, _alphaize($light-fg, $bg-color), $light-fg);
  } @else if $darker-ratio >= $threshold {
    @return if($dark-fg-has-alpha, _alphaize($dark-fg, $bg-color), $dark-fg);
  }

  @for $i from 1 through 10 {
    $lighter: color.scale($light-fg, $lightness: $i * 10%, $saturation: $i * 10%);
    $darker: color.scale($dark-fg, $lightness: $i * -10%, $saturation: $i * 10%);

    $darker-ratio: _contrast($bg-color, $darker);
    $lighter-ratio: _contrast($bg-color, $lighter);

    @if ($lighter-ratio >= $threshold) {
      @return if($light-fg-has-alpha, _alphaize($lighter, $bg-color), $lighter);
    }

    @if ($darker-ratio >= $threshold) {
      @return if($dark-fg-has-alpha, _alphaize($darker, $bg-color), $darker);
    }
  }

  @if _contrast($bg-color, $lightest-color) >= $threshold {
    @return $lightest-color;
  } @else if _contrast($bg-color, $darkest-color) >= $threshold {
    @return $darkest-color;
  } @else {
    @error 'It\'s impossible to find a color with enough contrast.';
  }
}

/**
 * Computes an accessible text color adjusted for a given background using APCA contrast thresholds.
 *
 * @function apca-text-contrast
 * @param {Color} $background-color - The background color to test against.
 * @param {Color} $text-color - The initial text color to adjust.
 * @param {Number|string} $font-size - Font size (e.g., 16px) for threshold calculation.
 * @param {Number} [$font-weight=400] - Font weight for threshold lookup (default: 400).
 * @param {String} [$usage-context='body'] - Usage context key mapping to a contrast threshold.
 * @param {Map} [$options=()] - Optional parameters map:
 *   - {Number} iterations: Number of binary search iterations (default: 7).
 *   - {Boolean} strict: Throw error if final contrast is below threshold (default: true).
 *   - {Boolean} debug: Enable debug warnings (default: false).
 * @return {Color} - Adjusted text color that meets or exceeds the contrast threshold.
 *
 * @example scss
 * .my-component {
 *   color: my.apca-text-contrast(
 *     my.palette('neutral', 'base'),    // background color from project palette
 *     my.palette('neutral', 'black'),   // text color from project palette
 *     16px,                              // font size
 *     400,                               // font weight
 *     'body',                            // usage context key
 *     (debug: true)                      // enable debug logs
 *   );
 * }
 */
@function apca-text-contrast(
  $background-color,
  $text-color,
  $font-size,
  $font-weight: 400,
  $usage-context: 'body',
  $options: ()
) {
  // Set defaults and merge with provided options
  $default-options: (
    iterations: 7,
    strict: true,
    debug: false
  );
  $merged-options: map.merge($default-options, $options);
  $max-iterations: map.get($merged-options, iterations);
  $is-strict: map.get($merged-options, strict);
  $is-debug: map.get($merged-options, debug);

  // Retrieve contrast threshold for the given usage context
  $contrast-threshold: map.get($apca-use-case-thresholds, $usage-context);
  @if $contrast-threshold == null {
    @error "apca-text-contrast: invalid usage-context '#{$usage-context}'. "
         "Choose one of #{map.keys($apca-use-case-thresholds)}.";
  }

  // Calculate initial contrast value and determine polarity
  $initial-contrast-raw: apca.contrast($text-color, $background-color);
  $initial-contrast: math.abs(strip-unit($initial-contrast-raw));
  $contrast-polarity: if($initial-contrast-raw > 0, 1, -1);

  // Initial debug logs
  @if $is-debug {
    @warn "APCA ▶ usage-context: '#{$usage-context}', threshold: #{$contrast-threshold}";
    @warn "APCA ▶ initial contrast (raw): #{math.round($initial-contrast-raw, 1)}";
    @warn "APCA ▶ initial contrast (unitless): #{math.round($initial-contrast, 1)}";
  }

  // Binary search loop to find best contrast adjustment
  $lower-bound: 0%;
  $upper-bound: 100%;
  $best-color: $text-color;

  @for $i from 1 through $max-iterations {
    $mid-percentage: math.div($lower-bound + $upper-bound, 2);
    $candidate-color: if(
      $contrast-polarity == 1,
      color.scale($text-color, $lightness: -$mid-percentage),
      color.scale($text-color, $lightness:  $mid-percentage)
    );

    @if $is-debug {
      @warn "APCA ▶ iteration #{$i}: midpoint #{$mid-percentage}, candidate #{meta.inspect($candidate-color)}";
    }

    $candidate-contrast-raw: apca.contrast($candidate-color, $background-color);
    $candidate-contrast: math.abs(strip-unit($candidate-contrast-raw));

    @if $candidate-contrast >= $contrast-threshold {
      $best-color: $candidate-color;
      $upper-bound: $mid-percentage;
    } @else {
      $lower-bound: $mid-percentage;
    }
  }

  // 6) Final contrast validation
  $final-contrast-raw: apca.contrast($best-color, $background-color);
  $final-contrast: math.abs(strip-unit($final-contrast-raw));

  @if $is-debug {
    @warn "APCA ▶ final contrast (raw): #{_to-fixed($final-contrast-raw, 1)}";
    @warn "APCA ▶ final contrast (unitless): #{_to-fixed($final-contrast, 1)}";
  }

  @if $final-contrast < $contrast-threshold and $is-strict {
    @error "APCA Contrast Error: final contrast #{_to-fixed($final-contrast, 1)} "
         "is below threshold #{_to-fixed($contrast-threshold, 1)} for usage-context '#{$usage-context}', "
         "font-size #{$font-size}, font-weight #{$font-weight}.";
  }

  @return $best-color;
}

/// convert a hsl color to rgb
///
/// @access public
/// @group helpers
/// @link https://gist.github.com/omgmog/6192734
/// @param {color} $hsl-color - hsl color
///
@function hsl-to-rgb($hsl-color) {
  @return color.mix($hsl-color, $hsl-color);
}

/// Replace `$search` with `$replace` in `$string`
///
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
///
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

/// Convert font weights names to numbers. Names can be any case,
/// dash or separated separated or not separated at all.
///
/// @access public
/// @author Sobral
/// @param {String} $weight - Weight name
/// @return {Number}
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight?v=control#Common_weight_name_mapping
///
/// @example scss
/// h1 {
/// 	font-weight: font-weight('medium');
/// }
///
@function font-weight($weight: 'normal') {
  $default-weights: (
    'thin': 100,
    'hairline': 100,
    'extralight': 200,
    'extra light': 200,
    'extra-light': 200,
    'ultralight': 200,
    'ultra light': 200,
    'ultra-light': 200,
    'light': 300,
    'normal': 400,
    'medium': 500,
    'semibold': 600,
    'semi bold': 600,
    'semi-bold': 600,
    'demibold': 600,
    'demi bold': 600,
    'demi-bold': 600,
    'bold': 700,
    'extrabold': 800,
    'extra bold': 800,
    'extra-bold': 800,
    'ultrabold': 800,
    'ultra bold': 800,
    'ultra-bold': 800,
    'black': 900,
    'heavy': 900,
  );

  $weight: string.to-lower-case($weight);

  @if meta.global-variable-exists('my-font-weights') and meta.type-of($my-font-weights) == 'map' {
    $default-weights: map.merge($default-weights, $my-font-weights);
  }

  @if not map.has-key($default-weights, $weight) {
    @error 'unknown value sent to `font-weight` function-> #{$weight}.';
  }

  @return map.get($default-weights, $weight);
}

/// Get a z-index value from a layer name
///
/// @access public
/// @param {String} $layer - Name of the layer
/// @require {variable} $layers
/// @return {Number}
///
/// @example scss
/// 	dialog[open] {
/// 		z-index: layer('modal');
/// 	}
///
@function layer($layer: 'default') {
  $default-layers: (
    'modal': 5000,
    'dropdown': 4000,
    'default': 1,
    'below': -1,
  );

  @if meta.global-variable-exists('my-layers') and meta.type-of($my-layers) == 'map' {
    $default-layers: map.merge($default-layers, $my-layers);
  }

  @if not map.has-key($default-layers, $layer) {
    @error 'unknown value sent to `layer` function-> #{$layer}. Available values-> `#{map.keys($default-layers)}`';
  }

  @return map.get($default-layers, $layer);
}

/// Helper function to use organized colors and tones
///
/// @access public
/// @param {String} $color-path - Color path as a list
/// @require {variable} $my-palette
/// @return {color}
/// @link http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
///
/// @example scss
/// 	a {
/// 		color: palette('anchor');
///
/// 		&:hover {
/// 			color: palette('anchor', 'hover');
/// 		}
/// 	}
///
@function palette($color-path...) {
  $color: null;

  $default-palette: (
    'white': rgb(255, 255, 255),
    'black': rgb(0, 0, 0),
    'anchor': (
      'base': rgb(0, 102, 204),
      'link': rgb(0, 102, 204),
      'visited': rgb(128, 0, 128),
      'hover': rgb(50, 152, 255),
      'focus': rgb(50, 152, 255),
      'active': rgb(229, 0, 80),
    ),
    'border': (
      'base': rgb(192, 192, 192),
      'focus': rgb(0, 0, 0),
    ),
    'button': (
      'base': rgb(225, 225, 225),
      'focus': rgb(229, 241, 251),
      'slider': hsl(0, 0%, 40%),
      'submit': rgb(217, 83, 79),
      'reset': transparent,
    ),
    'disabled': (
      'foreground': hsl(0, 0%, 42%),
      'background': hsl(0, 0%, 94%),
    ),
    'loading': (
      'foreground': hsl(0, 0%, 94%),
      'background': hsla(0, 0%, 7%, 0.8),
    ),
    'label': (
      'default': rgb(119, 119, 119),
      'primary': rgb(51, 122, 183),
      'success': rgb(66, 133, 66),
      'info': rgb(60, 127, 145),
      'warning': rgb(240, 173, 78),
      'danger': rgb(217, 83, 79),
    ),
    'mark': (
      'foreground': rgb(51, 51, 51),
      'background': rgb(215, 255, 90),
    ),
    'placeholder': (
      'base': hsl(0, 0%, 34%),
      'focus': hsl(0, 0%, 56%),
    ),
    'quotes': hsl(0, 0%, 34%),
    'selection': (
      'foreground': rgb(255, 255, 255),
      'background': rgb(20, 105, 140),
    ),
    'tap-highlight': rgb(255, 94, 153),
    'target-highlight': rgb(255, 255, 102),
    'text': (
      'dark': hsl(0, 0%, 13%),
      'light': rgb(229, 231, 234),
    ),
  );

  $full-palette: ();

  @if meta.variable-exists('my-palette') and meta.type-of($my-palette) == 'map' {
    $full-palette: map.deep-merge($default-palette, $my-palette);
  }

  $color: map.get($full-palette, $color-path...);

  @if meta.type-of($color) == 'map' {
    @if map.has-key($full-palette, list.append($color-path, 'medium', $separator: space)...) {
      $color: map.get($full-palette, list.append($color-path, 'medium', $separator: space)...);
    } @else if map.has-key($full-palette, list.append($color-path, 'base', $separator: space)...) {
      $color: map.get($full-palette, list.append($color-path, 'base', $separator: space)...);
    } @else if map.has-key($full-palette, list.append($color-path, 'default', $separator: space)...) {
      $color: map.get($full-palette, list.append($color-path, 'default', $separator: space)...);
    }
  }

  @if meta.type-of($color) == 'color' or $color == 'transparent' or meta.type-of($color) == 'list' {
    @return $color;
  }

  @return null;
}


/// Trims a string by removing leading and trailing spaces
///
/// @param {String} $string - String to trim
/// @return {String} - String without spaces
///
@function trim($string) {
  @return string.slice(
    $string,
    _first-index($string, 'left'),
    _first-index($string, 'right')
  );
}

/// Find first char which is not a space
///
/// @param {String} $string - String to search
/// @param {String} $direction ['left'] - Either 'left' or 'right' to indicate search direction
/// @access private
/// @return {Number} - Index of first non-space character
///
@function _first-index($string, $direction: 'left') {
  @for $i from 1 through string.length($string) {
    $index: if($direction == 'left', $i, -$i);

    @if string.slice($string, $index, $index) != ' ' {
      @return $index;
    }
  }

  @return 0;
}

/// Get a length value from a breakpoint name
///
/// @access public
/// @param {String} $breakpoint - name of the break point
/// @require {variable} $breakpoints
/// @return {Number}
///
@function breakpoint($breakpoint: null) {
  $default-breakpoints: (
    'phone__portrait': 20em, // 320px,
    'phone__landscape': 30em, // 480px,
    'tablet__portrait': 48em, // 768px,
    'tablet__landscape': 64em, // 1024px,
    'desktop': 80em, // 1280px,
    'wide': 100em, // 1600px,
  );

  @if $breakpoint == null {
    @error 'A breakpoint name is required. Available values-> `#{map.keys($default-breakpoints)}`';
  }

  @if meta.global-variable-exists('my-breakpoints') and meta.type-of($my-breakpoints) == 'map' {
    $default-breakpoints: map.merge($default-breakpoints, $my-breakpoints);
  }

  @if not map.has-key($default-breakpoints, $breakpoint) {
    @error 'unknown value sent to `breakpoint` function-> #{$breakpoint}. Available values -> `#{map.keys($default-breakpoints)}`';
  }

  @return map.get($default-breakpoints, $breakpoint);
}

/// Get an aspect-ratio from a name
///
/// @access public
/// @param {String} $name - name of the break point
/// @return {String}
///
@function aspect-ratio($name: null) {
  $default: (
    'cinemascope': 21 / 9,
    'widescreen': 37 / 20,
    'sixteen-nine': 16 / 9,
    'hdtv': 16 / 9,
    'hd-video': 16 / 9,
    'classic-film': 3 / 2,
    'tv': 4 / 3,
    'standard-monitor': 4 / 3,
    'four-three': 4 / 3,
    'square': 1 / 1,
  );

  @if $name == null {
    @error 'An aspect-ratio name is required. Available values-> `#{map.keys($default)}`';
  } @else {
    $name: string.to-lower-case($name);
    $name: str-replace($name, ' ', '-');
    $name: str-replace($name, '-by-', '-');
    $name: str-replace($name, '-to-', '-');
  }

  @if meta.global-variable-exists('my-aspect-ratios') and meta.type-of($my-aspect-ratios) == 'map' {
    $default: map.merge($default, $my-aspect-ratios);
  }

  @if not map.has-key($default, $name) {
    @error 'unknown value sent to `aspect-ratio` function-> #{$name}. Available values -> `#{map.keys($default)}`';
  }

  @return map.get($default, $name);
}
